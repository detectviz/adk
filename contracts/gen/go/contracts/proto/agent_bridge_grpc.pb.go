// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: contracts/proto/agent_bridge.proto

package assistantv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentBridge_ExecuteTool_FullMethodName   = "/sre.assistant.v1.AgentBridge/ExecuteTool"
	AgentBridge_RegisterAgent_FullMethodName = "/sre.assistant.v1.AgentBridge/RegisterAgent"
	AgentBridge_HealthCheck_FullMethodName   = "/sre.assistant.v1.AgentBridge/HealthCheck"
	AgentBridge_DiscoverTools_FullMethodName = "/sre.assistant.v1.AgentBridge/DiscoverTools"
)

// AgentBridgeClient is the client API for AgentBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent 與工具的橋接服務
type AgentBridgeClient interface {
	// 執行工具（同步）
	ExecuteTool(ctx context.Context, in *ToolRequest, opts ...grpc.CallOption) (*ToolResponse, error)
	// 註冊 Agent（可選）
	RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 健康檢查（可選）
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthStatus, error)
	// 探勘可用工具
	DiscoverTools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ToolsResponse, error)
}

type agentBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentBridgeClient(cc grpc.ClientConnInterface) AgentBridgeClient {
	return &agentBridgeClient{cc}
}

func (c *agentBridgeClient) ExecuteTool(ctx context.Context, in *ToolRequest, opts ...grpc.CallOption) (*ToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolResponse)
	err := c.cc.Invoke(ctx, AgentBridge_ExecuteTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentBridgeClient) RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AgentBridge_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentBridgeClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, AgentBridge_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentBridgeClient) DiscoverTools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolsResponse)
	err := c.cc.Invoke(ctx, AgentBridge_DiscoverTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentBridgeServer is the server API for AgentBridge service.
// All implementations must embed UnimplementedAgentBridgeServer
// for forward compatibility.
//
// Agent 與工具的橋接服務
type AgentBridgeServer interface {
	// 執行工具（同步）
	ExecuteTool(context.Context, *ToolRequest) (*ToolResponse, error)
	// 註冊 Agent（可選）
	RegisterAgent(context.Context, *AgentInfo) (*RegisterResponse, error)
	// 健康檢查（可選）
	HealthCheck(context.Context, *Empty) (*HealthStatus, error)
	// 探勘可用工具
	DiscoverTools(context.Context, *Empty) (*ToolsResponse, error)
	mustEmbedUnimplementedAgentBridgeServer()
}

// UnimplementedAgentBridgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentBridgeServer struct{}

func (UnimplementedAgentBridgeServer) ExecuteTool(context.Context, *ToolRequest) (*ToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTool not implemented")
}
func (UnimplementedAgentBridgeServer) RegisterAgent(context.Context, *AgentInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAgentBridgeServer) HealthCheck(context.Context, *Empty) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAgentBridgeServer) DiscoverTools(context.Context, *Empty) (*ToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverTools not implemented")
}
func (UnimplementedAgentBridgeServer) mustEmbedUnimplementedAgentBridgeServer() {}
func (UnimplementedAgentBridgeServer) testEmbeddedByValue()                     {}

// UnsafeAgentBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentBridgeServer will
// result in compilation errors.
type UnsafeAgentBridgeServer interface {
	mustEmbedUnimplementedAgentBridgeServer()
}

func RegisterAgentBridgeServer(s grpc.ServiceRegistrar, srv AgentBridgeServer) {
	// If the following call pancis, it indicates UnimplementedAgentBridgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentBridge_ServiceDesc, srv)
}

func _AgentBridge_ExecuteTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBridgeServer).ExecuteTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentBridge_ExecuteTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBridgeServer).ExecuteTool(ctx, req.(*ToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentBridge_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBridgeServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentBridge_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBridgeServer).RegisterAgent(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentBridge_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBridgeServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentBridge_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBridgeServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentBridge_DiscoverTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBridgeServer).DiscoverTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentBridge_DiscoverTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBridgeServer).DiscoverTools(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentBridge_ServiceDesc is the grpc.ServiceDesc for AgentBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sre.assistant.v1.AgentBridge",
	HandlerType: (*AgentBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTool",
			Handler:    _AgentBridge_ExecuteTool_Handler,
		},
		{
			MethodName: "RegisterAgent",
			Handler:    _AgentBridge_RegisterAgent_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AgentBridge_HealthCheck_Handler,
		},
		{
			MethodName: "DiscoverTools",
			Handler:    _AgentBridge_DiscoverTools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/proto/agent_bridge.proto",
}
