# Mapping entry for software-bug-assistant
agent_path: "adk-references/agents/software-bug-assistant"
language: "python" # 若實際語言不同請調整
description: "單一 Agent，採 MCP 與多工具範式，用於軟體錯誤調查 (collect evidence, triage, propose fix, optionally apply)"
size: "medium"
dependencies:
  - "internal/tool_runner (MCP tool calls like git_search, log_fetch, kubectl)"
  - "requests / http clients"
  - "os / subprocess calls"
  - "local filesystem for state persistence"
current_apis_used:
  - "call_tool(name, input) / MCP tool invocation primitives"
  - "direct subprocess / shell calls (e.g. kubectl, git)"
  - "requests.get/post to external services (GitHub API, monitoring endpoints)"
  - "local file read/write for state or scratch"
  - "os.environ for secrets"
recommended_replacements:
  - "runtime.tool_runner.invoke(tool_name, ToolRequest)  # replace raw MCP call_tool()/subprocess"
  - "runtime.http_client.request(...)  # replace direct requests usage"
  - "runtime.kv_store.get()/set()/delete()  # replace local file persistence"
  - "runtime.secrets_manager.get_secret(name)  # replace os.environ direct usage"
  - "use AgentService gRPC/HTTP with proto messages (AgentRequest / AgentResponse / BugReport / TriageAction, etc.) for I/O"
  - "runtime.logger / runtime.metrics API for observability instead of print/logging ad-hoc"
proto_messages:
  - "AgentRequest"
  - "AgentResponse"
  - "BugReport"
  - "Observation"
  - "TriageAction"
  - "FixPatch"
  - "Evidence"
  - "StateSnapshot"
tests_to_add:
  - "unit: mock runtime.tool_runner to assert correct tool invocation sequence and parameters"
  - "unit: mock runtime.http_client to test retries, timeouts, and error handling"
  - "unit: mock runtime.kv_store to test persistence semantics and recovery"
  - "integration: contract test against fake AgentService server verifying AgentRequest and handling of AgentResponse"
  - "integration: tool-level integration using a process-local fake MCP implementation"
  - "e2e: run agent in container with fake runtime stack to validate observation→action→persist flow"
priority: "high"
notes: |
  - 單一 agent、邏輯集中且可拆成「tool orchestration + decision logic」，最適合作為示範改造範例。
  - 改造目標：把 tool orchestration abstract 出 runtime API、所有 I/O 與工具呼叫以 proto-based contract 包裝，並加入充分的單元及合約測試。